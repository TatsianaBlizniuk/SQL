---
---  CREATE TABLE statements
---

--DROP TABLE ORDERS;
--DROP TABLE CUSTOMERS;
--DROP TABLE SALESREPS;
--DROP TABLE OFFICES;
--DROP TABLE PRODUCTS;


CREATE TABLE PRODUCTS
     (MFR_ID CHAR(3) NOT NULL,
  PRODUCT_ID CHAR(5) NOT NULL,
 DESCRIPTION VARCHAR(20) NOT NULL,
       PRICE MONEY NOT NULL,
 QTY_ON_HAND INTEGER NOT NULL,
 PRIMARY KEY (MFR_ID, PRODUCT_ID));


CREATE TABLE OFFICES
     (OFFICE INT NOT NULL,
        CITY VARCHAR(15) NOT NULL,
      REGION VARCHAR(10) NOT NULL,
         MGR INT,
      TARGET DECIMAL(9,2),
       SALES DECIMAL(9,2) NOT NULL,
 PRIMARY KEY (OFFICE));


CREATE TABLE SALESREPS
   (EMPL_NUM INT NOT NULL,
             CHECK (EMPL_NUM BETWEEN 101 AND 199),
        NAME VARCHAR(15) NOT NULL,
         AGE INTEGER,
  REP_OFFICE INTEGER,
       TITLE VARCHAR(10),
   HIRE_DATE DATE NOT NULL,
     MANAGER INT,
       QUOTA DECIMAL(9,2),
       SALES DECIMAL(9,2) NOT NULL,
 PRIMARY KEY (EMPL_NUM),
 FOREIGN KEY (MANAGER) REFERENCES SALESREPS(EMPL_NUM),
 CONSTRAINT WORKSIN FOREIGN KEY (REP_OFFICE)  
  REFERENCES OFFICES(OFFICE));


CREATE TABLE CUSTOMERS
   (CUST_NUM INTEGER    NOT NULL,
    COMPANY VARCHAR(20) NOT NULL,
    CUST_REP INTEGER,
    CREDIT_LIMIT DECIMAL(9,2),
 PRIMARY KEY (CUST_NUM),
 CONSTRAINT HASREP FOREIGN KEY (CUST_REP)
  REFERENCES SALESREPS(EMPL_NUM));


CREATE TABLE ORDERS
  (ORDER_NUM INTEGER NOT NULL,
             CHECK (ORDER_NUM > 100000),
  ORDER_DATE DATE NOT NULL,
        CUST INTEGER NOT NULL,
         REP INTEGER,
         MFR CHAR(3) NOT NULL,
     PRODUCT CHAR(5) NOT NULL,
         QTY INTEGER NOT NULL,
      AMOUNT DECIMAL(9,2) NOT NULL,
 PRIMARY KEY (ORDER_NUM),
 CONSTRAINT PLACEDBY FOREIGN KEY (CUST)
  REFERENCES CUSTOMERS(CUST_NUM)
   ON DELETE CASCADE,
 CONSTRAINT TAKENBY FOREIGN KEY (REP)
  REFERENCES SALESREPS(EMPL_NUM),
 CONSTRAINT ISFOR FOREIGN KEY (MFR, PRODUCT)
  REFERENCES PRODUCTS(MFR_ID, PRODUCT_ID));


ALTER TABLE OFFICES
  ADD CONSTRAINT HASMGR
  FOREIGN KEY (MGR) REFERENCES SALESREPS(EMPL_NUM);

---
---  Inserts for sample schema
---

---
---  PRODUCTS
---
INSERT INTO PRODUCTS VALUES('REI','2A45C','Ratchet Link',79.00,210);
INSERT INTO PRODUCTS VALUES('ACI','4100Y','Widget Remover',2750.00,25);
INSERT INTO PRODUCTS VALUES('QSA','XK47 ','Reducer',355.00,38);
INSERT INTO PRODUCTS VALUES('BIC','41627','Plate',180.00,0);
INSERT INTO PRODUCTS VALUES('IMM','779C ','900-LB Brace',1875.00,9);
INSERT INTO PRODUCTS VALUES('ACI','41003','Size 3 Widget',107.00,207);
INSERT INTO PRODUCTS VALUES('ACI','41004','Size 4 Widget',117.00,139);
INSERT INTO PRODUCTS VALUES('BIC','41003','Handle',652.00,3);
INSERT INTO PRODUCTS VALUES('IMM','887P ','Brace Pin',250.00,24);
INSERT INTO PRODUCTS VALUES('QSA','XK48 ','Reducer',134.00,203);
INSERT INTO PRODUCTS VALUES('REI','2A44L','Left Hinge',4500.00,12);
INSERT INTO PRODUCTS VALUES('FEA','112  ','Housing',148.00,115);
INSERT INTO PRODUCTS VALUES('IMM','887H ','Brace Holder',54.00,223);
INSERT INTO PRODUCTS VALUES('BIC','41089','Retainer',225.00,78);
INSERT INTO PRODUCTS VALUES('ACI','41001','Size 1 Wiget',55.00,277);
INSERT INTO PRODUCTS VALUES('IMM','775C ','500-lb Brace',1425.00,5);
INSERT INTO PRODUCTS VALUES('ACI','4100Z','Widget Installer',2500.00,28);
INSERT INTO PRODUCTS VALUES('QSA','XK48A','Reducer',177.00,37);
INSERT INTO PRODUCTS VALUES('ACI','41002','Size 2 Widget',76.00,167);
INSERT INTO PRODUCTS VALUES('REI','2A44R','Right Hinge',4500.00,12);
INSERT INTO PRODUCTS VALUES('IMM','773C ','300-lb Brace',975.00,28);
INSERT INTO PRODUCTS VALUES('ACI','4100X','Widget Adjuster',25.00,37);
INSERT INTO PRODUCTS VALUES('FEA','114  ','Motor Mount',243.00,15);
INSERT INTO PRODUCTS VALUES('IMM','887X ','Brace Retainer',475.00,32);
INSERT INTO PRODUCTS VALUES('REI','2A44G','Hinge Pin',350.00,14);


---
---  OFFICES
---
INSERT INTO OFFICES VALUES(22,'Denver','Western',null,300000.00,186042.00);
INSERT INTO OFFICES VALUES(11,'New York','Eastern',null,575000.00,692637.00);
INSERT INTO OFFICES VALUES(12,'Chicago','Eastern',null,800000.00,735042.00);
INSERT INTO OFFICES VALUES(13,'Atlanta','Eastern',null,350000.00,367911.00);
INSERT INTO OFFICES VALUES(21,'Los Angeles','Western',null,725000.00,835915.00);


---
---  SALESREPS
---
INSERT INTO SALESREPS VALUES (106,'Sam Clark',52,11,'VP Sales','2006-06-14',null,275000.00,299912.00);
INSERT INTO SALESREPS VALUES (109,'Mary Jones',31,11,'Sales Rep','2007-10-12',106,300000.00,392725.00);
INSERT INTO SALESREPS VALUES (104,'Bob Smith',33,12,'Sales Mgr','2005-05-19',106,200000.00,142594.00);
INSERT INTO SALESREPS VALUES (108,'Larry Fitch',62,21,'Sales Mgr','2007-10-12',106,350000.00,361865.00);
INSERT INTO SALESREPS VALUES (105,'Bill Adams',37,13,'Sales Rep','2006-02-12',104,350000.00,367911.00);
INSERT INTO SALESREPS VALUES (102,'Sue Smith',48,21,'Sales Rep','2004-12-10',108,350000.00,474050.00);
INSERT INTO SALESREPS VALUES (101,'Dan Roberts',45,12,'Sales Rep','2004-10-20',104,300000.00,305673.00);
INSERT INTO SALESREPS VALUES (110,'Tom Snyder',41,null,'Sales Rep','2008-01-13',101,null,75985.00);
INSERT INTO SALESREPS VALUES (103,'Paul Cruz',29,12,'Sales Rep','2005-03-01',104,275000.00,286775.00);
INSERT INTO SALESREPS VALUES (107,'Nancy Angelli',49,22,'Sales Rep','2006-11-14',108,300000.00,186042.00);


---
---   OFFICE MANAGERS
---
UPDATE OFFICES SET MGR=108 WHERE OFFICE=22;
UPDATE OFFICES SET MGR=106 WHERE OFFICE=11;
UPDATE OFFICES SET MGR=104 WHERE OFFICE=12;
UPDATE OFFICES SET MGR=105 WHERE OFFICE=13;
UPDATE OFFICES SET MGR=108 WHERE OFFICE=21;

---
---   CUSTOMERS
---
INSERT INTO CUSTOMERS VALUES(2111,'JCP Inc.',103,50000.00);
INSERT INTO CUSTOMERS VALUES(2102,'First Corp.',101,65000.00);
INSERT INTO CUSTOMERS VALUES(2103,'Acme Mfg.',105,50000.00);
INSERT INTO CUSTOMERS VALUES(2123,'Carter \& Sons',102,40000.00);
INSERT INTO CUSTOMERS VALUES(2107,'Ace International',110,35000.00);
INSERT INTO CUSTOMERS VALUES(2115,'Smithson Corp.',101,20000.00);
INSERT INTO CUSTOMERS VALUES(2101,'Jones Mfg.',106,65000.00);
INSERT INTO CUSTOMERS VALUES(2112,'Zetacorp',108,50000.00);
INSERT INTO CUSTOMERS VALUES(2121,'QMA Assoc.',103,45000.00);
INSERT INTO CUSTOMERS VALUES(2114,'Orion Corp.',102,20000.00);
INSERT INTO CUSTOMERS VALUES(2124,'Peter Brothers',107,40000.00);
INSERT INTO CUSTOMERS VALUES(2108,'Holm \& Landis',109,55000.00);
INSERT INTO CUSTOMERS VALUES(2117,'J.P. Sinclair',106,35000.00);
INSERT INTO CUSTOMERS VALUES(2122,'Three Way Lines',105,30000.00);
INSERT INTO CUSTOMERS VALUES(2120,'Rico Enterprises',102,50000.00);
INSERT INTO CUSTOMERS VALUES(2106,'Fred Lewis Corp.',102,65000.00);
INSERT INTO CUSTOMERS VALUES(2119,'Solomon Inc.',109,25000.00);
INSERT INTO CUSTOMERS VALUES(2118,'Midwest Systems',108,60000.00);
INSERT INTO CUSTOMERS VALUES(2113,'Ian \& Schmidt',104,20000.00);
INSERT INTO CUSTOMERS VALUES(2109,'Chen Associates',103,25000.00);
INSERT INTO CUSTOMERS VALUES(2105,'AAA Investments',101,45000.00);

---
---  ORDERS
---
INSERT INTO ORDERS VALUES (112961,'2007-12-17',2117,106,'REI','2A44L',7,31500.00);
INSERT INTO ORDERS VALUES (113012,'2008-01-11',2111,105,'ACI','41003',35,3745.00);
INSERT INTO ORDERS VALUES (112989,'2008-01-03',2101,106,'FEA','114',6,1458.00);
INSERT INTO ORDERS VALUES (113051,'2008-02-10',2118,108,'QSA','XK47',4,1420.00);
INSERT INTO ORDERS VALUES (112968,'2007-10-12',2102,101,'ACI','41004',34,3978.00);
INSERT INTO ORDERS VALUES (113036,'2008-01-30',2107,110,'ACI','4100Z',9,22500.00);
INSERT INTO ORDERS VALUES (113045,'2008-02-02',2112,108,'REI','2A44R',10,45000.00);
INSERT INTO ORDERS VALUES (112963,'2007-12-17',2103,105,'ACI','41004',28,3276.00);
INSERT INTO ORDERS VALUES (113013,'2008-01-14',2118,108,'BIC','41003',1,652.00);
INSERT INTO ORDERS VALUES (113058,'2008-02-23',2108,109,'FEA','112',10,1480.00);
INSERT INTO ORDERS VALUES (112997,'2008-01-08',2124,107,'BIC','41003',1,652.00);
INSERT INTO ORDERS VALUES (112983,'2007-12-27',2103,105,'ACI','41004',6,702.00);
INSERT INTO ORDERS VALUES (113024,'2008-01-20',2114,108,'QSA','XK47',20,7100.00);
INSERT INTO ORDERS VALUES (113062,'2008-02-24',2124,107,'FEA','114',10,2430.00);
INSERT INTO ORDERS VALUES (112979,'2007-10-12',2114,102,'ACI','4100Z',6,15000.00);
INSERT INTO ORDERS VALUES (113027,'2008-01-22',2103,105,'ACI','41002',54,4104.00);
INSERT INTO ORDERS VALUES (113007,'2008-01-08',2112,108,'IMM','773C',3,2925.00);
INSERT INTO ORDERS VALUES (113069,'2008-03-02',2109,107,'IMM','775C',22,31350.00);
INSERT INTO ORDERS VALUES (113034,'2008-01-29',2107,110,'REI','2A45C',8,632.00);
INSERT INTO ORDERS VALUES (112992,'2007-11-04',2118,108,'ACI','41002',10,760.00);
INSERT INTO ORDERS VALUES (112975,'2007-10-12',2111,103,'REI','2A44G',6,2100.00);
INSERT INTO ORDERS VALUES (113055,'2008-02-15',2108,101,'ACI','4100X',6,150.00);
INSERT INTO ORDERS VALUES (113048,'2008-02-10',2120,102,'IMM','779C',2,3750.00);
INSERT INTO ORDERS VALUES (112993,'2007-01-04',2106,102,'REI','2A45C',24,1896.00);
INSERT INTO ORDERS VALUES (113065,'2008-02-27',2106,102,'QSA','XK47',6,2130.00);
INSERT INTO ORDERS VALUES (113003,'2008-01-25',2108,109,'IMM','779C',3,5625.00);
INSERT INTO ORDERS VALUES (113049,'2008-02-10',2118,108,'QSA','XK47',2,776.00);
INSERT INTO ORDERS VALUES (112987,'2007-12-31',2103,105,'ACI','4100Y',11,27500.00);
INSERT INTO ORDERS VALUES (113057,'2008-02-18',2111,103,'ACI','4100X',24,600.00);
INSERT INTO ORDERS VALUES (113042,'2008-02-20',2113,101,'REI','2A44R',5,22500.00);



-- TABLE ORDERS;  --заказы
-- TABLE CUSTOMERS;  --покупатели
-- TABLE SALESREPS;  --продавцы
-- TABLE OFFICES;   --офисы
-- TABLE PRODUCTS;   --товары



--Подзапросы. Операции над множествами. DML. Представления.
--Напишите скрипт из следующих запросов к своей базе данных (в комментариях указывать текст задания):

--Выбрать все заказы, выполненные определенным покупателем.
SELECT * FROM ORDERS
WHERE CUST IN (
SELECT CUST_NUM FROM CUSTOMERS 
WHERE COMPANY='JCP inc.');

--Выбрать всех покупателей в порядке уменьшения общей стоимости заказов.
SELECT COMPANY, SUM(AMOUNT) AS COMPANY_AMOUNT
FROM CUSTOMERS C JOIN ORDERS O
ON C.CUST_NUM=O.CUST
GROUP BY COMPANY
ORDER BY COMPANY_AMOUNT DESC;

--Выбрать все заказы, которые оформлялись менеджерами из восточного региона.
SELECT ORDER_NUM,REGION
FROM (SELECT*FROM OFFICES WHERE REGION ='EASTERN') O JOIN ORDERS R
ON O.MGR=R.REP;

--Найти описания товаров, приобретенные покупателем First Corp.
--SELECT*FROM PRODUCTS
--SELECT*FROM CUSTOMERS
--SELECT*FROM ORDERS
SELECT DESCRIPTION FROM PRODUCTS
WHERE PRODUCT_ID IN (
SELECT PRODUCT FROM ORDERS
WHERE CUST=(
SELECT CUST_NUM FROM CUSTOMERS WHERE COMPANY='First Corp.'));

--Выбрать всех сотрудников из Восточного региона и отсортировать по параметру Quota.
--SELECT*FROM SALESREPS
SELECT NAME, QUOTA FROM SALESREPS
WHERE REP_OFFICE IN
(SELECT OFFICE FROM OFFICES WHERE REGION ='Eastern')
ORDER BY QUOTA ASC;

--Выбрать заказы, сумма которых больше среднего значения.
SELECT ORDER_NUM, AMOUNT FROM ORDERS
WHERE AMOUNT>
(SELECT AVG(AMOUNT) FROM ORDERS);

--Выбрать менеджеров, которые обслуживали одних и тех же покупателей.
SELECT DISTINCT C.COMPANY, 
				S1.NAME, 
				S.NAME
FROM ORDERS O1 JOIN ORDERS O2
ON O1.CUST = O2.CUST
JOIN CUSTOMERS C
ON C.CUST_NUM = O1.CUST
JOIN SALESREPS S
ON S.EMPL_NUM = O1.REP
JOIN SALESREPS S1
ON S1.EMPL_NUM = O2.REP
WHERE O1.REP <> O2.REP;

--Выбрать покупателей с одинаковым кредитным лимитом.
SELECT DISTINCT A.COMPANY, 
				B.COMPANY,
				A.CREDIT_LIMIT,
				B.CREDIT_LIMIT
FROM CUSTOMERS A JOIN CUSTOMERS B
ON A.CREDIT_LIMIT=B.CREDIT_LIMIT
WHERE A.CUST_NUM<>B.CUST_NUM;

--Выбрать покупателей, сделавших заказы в один день.
SELECT DISTINCT C3.COMPANY, C4.COMPANY, C3.ORDER_DATE
FROM ORDERS O1 JOIN ORDERS O2
ON O1.ORDER_DATE=O2.ORDER_DATE
JOIN CUSTOMERS C3 ON O1.CUST=C3.CUST_NUM
JOIN CUSTOMERS C4 ON O2.CUST=C4.CUST_NUM
WHERE O1.ORDER_DATE<>O2.ORDER_DATE;

--Подсчитать, на какую сумму каждый офис выполнил заказы, и отсортировать их в порядке убывания.
--SELECT * FROM ORDERS
--SELECT * FROM SALESREPS
SELECT REP_OFFICE, SUM(AMOUNT) AS SUM
FROM SALESREPS S JOIN ORDERS O
ON S.EMPL_NUM=O.REP
GROUP BY REP_OFFICE
ORDER BY SUM(AMOUNT) DESC;

--Выбрать сотрудников, которые являются начальниками (у которых есть подчиненные).
--SELECT*FROM SALESREPS
SELECT NAME
FROM SALESREPS
WHERE EMPL_NUM IN 
(SELECT DISTINCT MANAGER 
FROM SALESREPS
WHERE MANAGER IS NOT NULL);

--Выбрать сотрудников, которые не являются начальниками (у которых нет подчиненных).
--SELECT*FROM SALESREPS
SELECT S1.NAME,
	   S2.NAME
FROM SALESREPS S1 LEFT JOIN SALESREPS S2
ON S1.EMPL_NUM = S2.MANAGER
WHERE S2.NAME IS NULL;

--Выбрать всех продукты, продаваемые менеджерами из восточного региона.
SELECT O1.PRODUCT_ID, O3.REGION
FROM PRODUCTS O1 JOIN ORDERS O2 
ON O1.PRODUCT_ID=O2.PRODUCT
JOIN OFFICES O3
ON O3.MGR=O2.REP
WHERE O3.REGION = 'Eastern';

--Выбрать фамилии и даты найма всех сотрудников и отсортировать по сумме заказов, которые они выполнили.
SELECT O1.NAME, O1.HIRE_DATE, SUM(AMOUNT)
FROM SALESREPS O1 JOIN ORDERS O2
ON O1.EMPL_NUM=O2.REP
GROUP BY O1.NAME, O1.HIRE_DATE
ORDER BY SUM(AMOUNT) ASC;

--Выбрать заказы, выполненные менеджерами из  восточного региона и отсортировать по количеству заказанного по возрастанию.
--SELECT*FROM PRODUCTS
--SELECT*FROM OFFICES
--SELECT*FROM SALESREPS
--SELECT*FROM CUSTOMERS
--SELECT*FROM ORDERS
SELECT O1.ORDER_NUM, O3.MGR, 03.REGION, 01.QTY
FROM ORDERS O1 JOIN SALESREPS O2
ON O1.REP=O2.EMPL_NUM
JOIN OFFICES O3
ON O1.REP=O3.MGR
WHERE O3.REGION = 'Eastern'
ORDER BY QTY ASC;

--Выбрать товары, которые дороже товаров, заказанных компанией First Corp.
SELECT P.PRODUCT_ID, C.COMPANY, P.PRICE 
FROM PRODUCTS P JOIN ORDERS O
ON P.PRODUCT_ID=O.PRODUCT
JOIN CUSTOMERS C
ON O.CUST=C.CUST_NUM
WHERE P.PRICE>
(SELECT P.PRICE
FROM PRODUCTS P JOIN ORDERS O
ON P.PRODUCT_ID=O.PRODUCT
JOIN CUSTOMERS C
ON O.CUST=C.CUST_NUM
WHERE C.COMPANY='First Corp.'
)

--Выбрать товары, которые не входят в товары, заказанные компанией First Corp.
SELECT P.PRODUCT_ID, C.COMPANY 
FROM PRODUCTS P JOIN ORDERS O
ON P.PRODUCT_ID=O.PRODUCT
JOIN CUSTOMERS C
ON O.CUST=C.CUST_NUM
WHERE C.COMPANY NOT LIKE 'First Corp.';

--Выбрать товары, которые по стоимости ниже среднего значения стоимости заказа по покупателю.
SELECT P.PRODUCT_ID, P.PRICE
FROM PRODUCTS P JOIN ORDERS O
ON P.PRODUCT_ID=O.PRODUCT
JOIN CUSTOMERS C
ON O.CUST=C.CUST_NUM
WHERE PRICE<
(SELECT AVG(O.AMOUNT)
FROM CUSTOMERS C JOIN ORDERS O
ON C.CUST_NUM=O.CUST)
GROUP BY P.PRODUCT_ID, P.PRICE

--Найти сотрудников, кто выполнял заказы в 2008, но не выполнял в 2007 (как минимум 2-мя разными способами).
--  Bob Smith (104) не выполнял заказы
--  Tom Snyder (110) только в 2008
--  Nancy Angelli (107) только в 2008
--  Mary Jones (109) только в 2008
--  остальные в 2007 и в 2008
SELECT	S.EMPL_NUM,
		S.NAME
FROM SALESREPS S
WHERE 
NOT EXISTS (SELECT O.REP FROM ORDERS O WHERE O.REP=S.EMPL_NUM AND YEAR(O.ORDER_DATE) = 2007)
ORDER BY S.EMPL_NUM;

--Найти организации, которые не делали заказы в 2008, но делали в 2007 (как минимум 2-мя разными способами).
SELECT	S.EMPL_NUM,
		S.NAME
FROM SALESREPS S
WHERE 
NOT EXISTS (SELECT O.REP FROM ORDERS O WHERE O.REP=S.EMPL_NUM AND YEAR(O.ORDER_DATE) = 2008)
ORDER BY S.EMPL_NUM;

--Найти организации, которые делали заказы в 2008 и в 2007 (как минимум 2-мя разными способами).
SELECT DISTINCT C.COMPANY,
	   C.CUST_NUM
FROM CUSTOMERS C LEFT JOIN ORDERS O
ON O.CUST = C.CUST_NUM
WHERE YEAR(O.ORDER_DATE) = 2007

INTERSECT

SELECT C.COMPANY,
	   C.CUST_NUM
FROM CUSTOMERS C LEFT JOIN ORDERS O
ON O.CUST = C.CUST_NUM
WHERE YEAR(O.ORDER_DATE) = 2008;

--Выполните DML операции:
--Создайте таблицу Аудит (дата, операция, производитель, код) – она будет использоваться для контроля записи в таблицу PRODUCTS.
CREATE TABLE Аудит
(дата DATE NOT NULL,
 операция VARCHAR(100) NOT NULL,
 производитель VARCHAR(20) NOT NULL,
 код INTEGER NOT NULL);
--SELECT*FROM Аудит

--Добавьте во временную таблицу все товары.
CREATE TABLE #T1
(T1_MFR_ID CHAR(3) NOT NULL,
 T1_PRODUCT_ID CHAR(5) NOT NULL,
 T1_DESCRIPTION VARCHAR(20) NOT NULL,
 T1_PRICE MONEY NOT NULL,
 T1_QTY_ON_HAND INTEGER NOT NULL);

INSERT INTO #T1 (T1_MFR_ID,T1_PRODUCT_ID,T1_DESCRIPTION,T1_PRICE,T1_QTY_ON_HAND) 
SELECT MFR_ID,PRODUCT_ID,DESCRIPTION,PRICE,QTY_ON_HAND 
FROM PRODUCTS;

SELECT * FROM #T1;
DELETE #T1;

--Добавьте в эту же временную таблицу запись о товаре, используя ограничения NULL и DEFAULT.
ALTER TABLE #T1
ALTER COLUMN T1_PRICE VARCHAR(20) NULL;

ALTER TABLE #T1 ADD CONSTRAINT DEF_QTY_ON_HAND
	DEFAULT '100' FOR T1_QTY_ON_HAND;

INSERT INTO #T1 (T1_MFR_ID,T1_PRODUCT_ID,T1_DESCRIPTION,T1_PRICE,T1_QTY_ON_HAND) 
VALUES ('ACI', '41007', 3, NULL, DEFAULT);

SELECT * FROM #T1;

--Добавьте в эту же временную таблицу запись о товаре, и одновременно добавьте эти же данные в 
--таблицу аудита (в столбце операция укажите INSERT, в столбце даты – текущую дату).
INSERT INTO #T1 (T1_MFR_ID, T1_PRODUCT_ID, T1_DESCRIPTION, T1_PRICE, T1_QTY_ON_HAND)
OUTPUT GETDATE() AS дата,
'INSERT' AS операция,
inserted.T1_MFR_ID AS производитель, 
inserted.T1_PRODUCT_ID AS код INTO Аудит
VALUES ('TEST', 'TEST', 'TEST', 10);
--SELECT*FROM Аудит

--Обновите данные о товарах во временной таблице – добавьте 20% к цене.
UPDATE #T1 SET T1_PRICE = T1_PRICE * 1.2;
SELECT * FROM #T1;

--Обновите данные о товарах, которые заказывала First Corp. во временной таблице – добавьте 10% к цене.
UPDATE #T1 
SET T1_PRICE = T1_PRICE * 1.1
WHERE T1_PRODUCT_ID = 
	(SELECT T1_PRODUCT_ID FROM ORDERS O
	LEFT JOIN #T1 ON T1_PRODUCT_ID = PRODUCT
	JOIN CUSTOMERS C ON CUST_NUM = CUST
	WHERE COMPANY = 'First Corp.');

--Обновите данные о товаре во временной таблице, и одновременно добавьте эти же 
--данные в таблицу аудита (в столбце операция укажите UPDATE, в столбце даты – текущую дату).

--Удалите товары, которые заказывала First Corp. во временной таблице.
 DELETE FROM #T1
 WHERE T1_PRODUCT_ID = 
	(SELECT T1_PRODUCT_ID FROM ORDERS O
	LEFT JOIN #T1 ON T1_PRODUCT_ID = PRODUCT
	JOIN CUSTOMERS C ON CUST_NUM = CUST
	WHERE COMPANY = 'First Corp.');

--Удалите данные о каком-либо товаре во временной таблице, и одновременно добавьте эти данные 
--в таблицу аудита (в столбце операция укажите DELETE, в столбце даты – текущую дату).

--Создайте представления:
--Покупателей, у которых есть заказы выше определенной суммы.
CREATE VIEW CustomersOrders AS 
SELECT * FROM CUSTOMERS c JOIN ORDERS o
ON c.CUST_NUM = o.CUST
WHERE AMOUNT > 3000;
GO

SELECT* FROM CustomersOrders
ORDER BY AMOUNT;

DROP VIEW CustomersOrders;

--Сотрудников, у которых офисы находятся в восточном регионе.
CREATE VIEW SalesrepsEastern AS
SELECT S.EMPL_NUM, S.NAME, O.REGION  
FROM SALESREPS S JOIN OFFICES O
ON S.REP_OFFICE=O.OFFICE
WHERE REGION='Eastern';
GO

SELECT * FROM SalesrepsEastern;
DROP VIEW SalesrepsEastern;

--Заказы, оформленные в 2008 году.
CREATE VIEW Order2008 AS
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE ORDER_DATE LIKE '2008%';
GO

SELECT * FROM Order2008;
DROP VIEW Order2008;

--Сотрудники, которые не оформили ни одного заказа.
CREATE VIEW SalearepsNotOrder AS
SELECT S.NAME, O.ORDER_NUM 
FROM SALESREPS S LEFT JOIN ORDERS O
ON S.EMPL_NUM=O.REP
WHERE O.ORDER_NUM IS NULL
GO

SELECT * FROM SalearepsNotOrder;
DROP VIEW SalearepsNotOrder;

--Самый популярный товар.
--SELECT*FROM ORDERS;
CREATE VIEW BestProduct AS
SELECT TOP(10) * FROM ORDERS
ORDER BY QTY DESC;
GO

SELECT * FROM BestProduct;
DROP VIEW BestProduct;

--Продемонстрируйте применение DML операций над представлениями.
--1) Все существующие ограничения целостности базовой таблицы наследуются представлением
--2) DML Запрос не должен содержать секцию группировки GROUP BY и агрегатные функции
--3) Запрос не должен использовать опции DISTINCT и TOP
--4) Запрос не должен использовать операторы UNION, INTERSECT и EXCEPT
--5) В SELECT-списке запроса не должно быть вычисляемых значений
--6) В секции FROM запроса должна указываться только одна таблица

--Продемонстрируйте пример применения операций над множествами.

--Продемонстрируйте и объясните применение опций CHECK OPTION и SCHEMABINDING.
--CHECK OPTION
CREATE VIEW Best_Sales AS
SELECT  * FROM SALESREPS 
WHERE [SALES]>200000
WITH CHECK OPTION;
GO

INSERT INTO Best_Sales (EMPL_NUM, NAME, HIRE_DATE, SALES)
	VALUES (133, 'John Bon Jovi', '2019-11-14', 300000); 
	--CHECK OPTION проверяет условие

SELECT * FROM Best_Sales;
DROP VIEW Best_Sales;

--SCHEMABINDING - запрет на изменение базовых таблиц
CREATE VIEW dbo.Low_Sales WITH SCHEMABINDING AS
SELECT EMPL_NUM, NAME, HIRE_DATE, SALES  FROM dbo.SALESREPS 
WHERE [SALES] < 100000;

ALTER TABLE SALESREPS DROP COLUMN SALES; -- ошибка так как запрет на удаление столбца, КОТОРЫЙ ЕСТЬ В ПРЕДСТАВЛЕНИИ
ALTER TABLE SALESREPS DROP COLUMN QUOTA; -- выполнено так как QUOTA нету в представлении

SELECT * FROM Low_Sales;
DROP VIEW Low_Sales;

--но можно наложить дополнительное ограничение
ALTER TABLE SALESREPS  
    ADD CONSTRAINT default_sales 
    DEFAULT 10000 FOR SALES;  -- выполнено

--Продемонстрируйте применение команды TRUNCATE.
--TRUNCATE быстрее и использует меньше системных ресурсов, чем delete
--удаляет все строки таблицы, но структура таблицы (столбцы, ограничения, индексы и т.д.) остается
--Нельзя использовать TRUNCATE TABLE для таблиц, связанных ограничением FOREIGN KEY.
--Откат (rollback) после TRUNCATE невозможе
SELECT CUST_NUM, COMPANY, CUST_REP, CREDIT_LIMIT
INTO CUSTOMERS_COPY FROM CUSTOMERS;

SELECT * FROM CUSTOMERS_COPY

TRUNCATE TABLE CUSTOMERS_COPY;

SELECT * FROM CUSTOMERS_COPY;

DROP TABLE CUSTOMERS_COPY;

--Напишите скрипт из аналогичных запросов к базе данных по варианту. В качестве комментария укажите условие запроса.
--Продемонстрируйте оба скрипта преподавателю.
