--Лабораторная работа №8 – СУБД – 2 часа

--Триггеры в T-SQL.
--1. Разработать следующие DML триггеры и продемонстрировать работоспособность триггеров: 
--1.1 При добавлении нового офиса добавлять строку с данными офиса в таблицу Audit.
SELECT*FROM OFFICES;

CREATE TABLE AUDIT(
    DATE DATE not null,
	OFFICE INT,
	CITY VARCHAR(20),
	REGION VARCHAR(20),
	MGR INT,
	TARGET DECIMAL(9,2),
	SALES DECIMAL(9,2));
	
CREATE TRIGGER NEWDATA
ON OFFICES
AFTER INSERT --после инсерта
AS
BEGIN
   DECLARE
    @OFFICE INT,
	@CITY VARCHAR(20),
	@REGION VARCHAR(20),
	@MGR INT,
	@TARGET DECIMAL(9,2),
	@SALES DECIMAL(9,2);
SELECT @OFFICE=(SELECT OFFICE FROM INSERTED);
SELECT @CITY=(SELECT CITY FROM INSERTED);
SELECT @REGION=(SELECT REGION FROM INSERTED);
SELECT @MGR=(SELECT MGR FROM INSERTED);
SELECT @TARGET=(SELECT TARGET FROM INSERTED);
SELECT @SALES=(SELECT SALES FROM INSERTED);
INSERT INTO AUDIT VALUES(getdate(),@OFFICE,@CITY,@REGION,@MGR,@TARGET,@SALES);
END;

INSERT INTO OFFICES VALUES (30, 'TEST1', 'Western', 104, 1000.00, 1.00);
INSERT INTO OFFICES VALUES (31, 'TEST2', 'Western', 104, 1000.00, 1.00);
INSERT INTO OFFICES VALUES (32, 'TEST3', 'Western', 104, 1000.00, 1.00);
INSERT INTO OFFICES VALUES (33, 'TEST4', 'Western', 104, 1000.00, 1.00);

SELECT*FROM OFFICES;
SELECT*FROM AUDIT;

DELETE FROM OFFICES WHERE CITY='TEST1';
DELETE FROM OFFICES WHERE CITY='TEST2';
DELETE FROM OFFICES WHERE CITY='TEST3';
DELETE FROM OFFICES WHERE CITY='TEST4';

DROP TABLE AUDIT;
DROP TRIGGER NEWDATA;


--1.2 При обновлении данных офиса добавлять строку с предыдущими данными офиса в таблицу Audit.
CREATE TABLE AUDIT(
    DATE DATE not null,
	OFFICE INT,
	CITY VARCHAR(20),
	REGION VARCHAR(20),
	MGR INT,
	TARGET DECIMAL(9,2),
	SALES DECIMAL(9,2));

INSERT INTO OFFICES VALUES (30, 'TEST1', 'Western', 104, 1000.00, 1.00);

CREATE TRIGGER NEWDATA2
ON OFFICES
AFTER UPDATE
AS
BEGIN
   DECLARE
    @OFFICE INT,
	@CITY VARCHAR(20),
	@REGION VARCHAR(20),
	@MGR INT,
	@TARGET DECIMAL(9,2),
	@SALES DECIMAL(9,2);
SELECT @OFFICE=(SELECT OFFICE FROM DELETED);
SELECT @CITY=(SELECT CITY FROM DELETED);
SELECT @REGION=(SELECT REGION FROM DELETED);
SELECT @MGR=(SELECT MGR FROM DELETED);
SELECT @TARGET=(SELECT TARGET FROM DELETED);
SELECT @SALES=(SELECT SALES FROM DELETED);
INSERT INTO AUDIT VALUES(getdate(),@OFFICE,@CITY,@REGION,@MGR,@TARGET,@SALES);
END;

UPDATE OFFICES SET CITY='TEST5' WHERE CITY='TEST1';

SELECT*FROM OFFICES;
SELECT*FROM AUDIT;

DELETE FROM OFFICES WHERE CITY='TEST5';
DROP TABLE AUDIT;
DROP TRIGGER NEWDATA2;

--1.3 При удалении данных о офиса добавлять строку с данными офиса в таблицу Audit.
CREATE TABLE AUDIT(
    DATE DATE not null,
	OFFICE INT,
	CITY VARCHAR(20),
	REGION VARCHAR(20),
	MGR INT,
	TARGET DECIMAL(9,2),
	SALES DECIMAL(9,2));

INSERT INTO OFFICES VALUES (30, 'TEST1', 'Western', 104, 1000.00, 1.00);

CREATE TRIGGER NEWDATA3
ON OFFICES
AFTER DELETE
AS
BEGIN
   DECLARE
    @OFFICE INT,
	@CITY VARCHAR(20),
	@REGION VARCHAR(20),
	@MGR INT,
	@TARGET DECIMAL(9,2),
	@SALES DECIMAL(9,2);
SELECT @OFFICE=(SELECT OFFICE FROM DELETED);
SELECT @CITY=(SELECT CITY FROM DELETED);
SELECT @REGION=(SELECT REGION FROM DELETED);
SELECT @MGR=(SELECT MGR FROM DELETED);
SELECT @TARGET=(SELECT TARGET FROM DELETED);
SELECT @SALES=(SELECT SALES FROM DELETED);
INSERT INTO AUDIT VALUES(getdate(),@OFFICE,@CITY,@REGION,@MGR,@TARGET,@SALES);
END;

DELETE OFFICES WHERE CITY='TEST1';

SELECT*FROM OFFICES;
SELECT*FROM AUDIT;

DELETE FROM OFFICES WHERE CITY='TEST1';
DROP TABLE AUDIT;
DROP TRIGGER NEWDATA3;

--2. Разработать скрипт, который демонстрирует, что проверка ограничения 
--целостности выполняется до срабатывания AFTER-триггера.


--3. Создать 3 триггера, срабатывающих на событие удаления в таблице и упорядочить их.
CREATE TABLE AUDIT(
    NUMBER_TR VARCHAR(20),
    DATE DATE not null,
	OFFICE INT,
	CITY VARCHAR(20),
	REGION VARCHAR(20),
	MGR INT,
	TARGET DECIMAL(9,2),
	SALES DECIMAL(9,2));

CREATE TRIGGER ONE
ON OFFICES
AFTER INSERT --после инсерта
AS
BEGIN
   DECLARE
    @OFFICE INT,
	@CITY VARCHAR(20),
	@REGION VARCHAR(20),
	@MGR INT,
	@TARGET DECIMAL(9,2),
	@SALES DECIMAL(9,2);
SELECT @OFFICE=(SELECT OFFICE FROM INSERTED);
SELECT @CITY=(SELECT CITY FROM INSERTED);
SELECT @REGION=(SELECT REGION FROM INSERTED);
SELECT @MGR=(SELECT MGR FROM INSERTED);
SELECT @TARGET=(SELECT TARGET FROM INSERTED);
SELECT @SALES=(SELECT SALES FROM INSERTED);
INSERT INTO AUDIT VALUES('ONE',getdate(),@OFFICE,@CITY,@REGION,@MGR,@TARGET,@SALES);
END;

CREATE TRIGGER TWO
ON OFFICES
AFTER INSERT --после инсерта
AS
BEGIN
   DECLARE
    @OFFICE INT,
	@CITY VARCHAR(20),
	@REGION VARCHAR(20),
	@MGR INT,
	@TARGET DECIMAL(9,2),
	@SALES DECIMAL(9,2);
SELECT @OFFICE=(SELECT OFFICE FROM INSERTED);
SELECT @CITY=(SELECT CITY FROM INSERTED);
SELECT @REGION=(SELECT REGION FROM INSERTED);
SELECT @MGR=(SELECT MGR FROM INSERTED);
SELECT @TARGET=(SELECT TARGET FROM INSERTED);
SELECT @SALES=(SELECT SALES FROM INSERTED);
INSERT INTO AUDIT VALUES('TWO',getdate(),@OFFICE,@CITY,@REGION,@MGR,@TARGET,@SALES);
END;

CREATE TRIGGER THREE
ON OFFICES
AFTER INSERT --после инсерта
AS
BEGIN
   DECLARE
    @OFFICE INT,
	@CITY VARCHAR(20),
	@REGION VARCHAR(20),
	@MGR INT,
	@TARGET DECIMAL(9,2),
	@SALES DECIMAL(9,2);
SELECT @OFFICE=(SELECT OFFICE FROM INSERTED);
SELECT @CITY=(SELECT CITY FROM INSERTED);
SELECT @REGION=(SELECT REGION FROM INSERTED);
SELECT @MGR=(SELECT MGR FROM INSERTED);
SELECT @TARGET=(SELECT TARGET FROM INSERTED);
SELECT @SALES=(SELECT SALES FROM INSERTED);
INSERT INTO AUDIT VALUES('THREE',getdate(),@OFFICE,@CITY,@REGION,@MGR,@TARGET,@SALES);
END;

exec sp_settriggerorder 'dbo.THREE', 'first', 'insert'
go
exec sp_settriggerorder 'dbo.ONE', 'last', 'insert'
go

INSERT INTO OFFICES VALUES (30, 'TEST1', 'Western', 104, 1000.00, 1.00);

SELECT*FROM AUDIT;
DROP TABLE AUDIT;
DELETE OFFICES WHERE CITY='TEST1';

DROP TRIGGER ONE;
DROP TRIGGER TWO;
DROP TRIGGER THREE;

--4. Разработать скрипт, демонстрирующий, что AFTER-триггер 
--является частью транзакции, в рамках которого выполняется оператор, активизировавший триггер.

--5. Создать триггер на обновление для представления. Продемонстрировать работоспособность триггера.
INSERT INTO OFFICES VALUES (30, 'TEST1', 'Western', 104, 1000.00, 1.00);

CREATE VIEW OFFICECITY AS
SELECT OFFICE, CITY
FROM OFFICES
WHERE REGION LIKE 'West%';
GO

SELECT * FROM OFFICECITY;
DROP VIEW OFFICECITY;

GO
CREATE TRIGGER UPDATE_VIEW
ON OFFICECITY INSTEAD OF UPDATE
AS BEGIN
  UPDATE OFFICES SET CITY='TEST2' WHERE OFFICE=30;
END;

UPDATE OFFICECITY SET CITY='TEST3' WHERE OFFICE=30;
 
SELECT * FROM OFFICECITY;
SELECT*FROM OFFICES;

DELETE OFFICES WHERE CITY='TEST2';
DROP VIEW OFFICECITY;

--6. Создать триггер уровня базы данных. Продемонстрировать работоспособность триггера.
CREATE TABLE TASK6(
    NUMBER VARCHAR(20),
	NAME VARCHAR(20),
	CITY VARCHAR(20));

GO
CREATE TRIGGER DDL_TRIGGER
  ON DATABASE FOR DROP_TABLE
  AS PRINT 'Для удаления таблицы вы должны отключить DDL_TRIGGER'
  ROLLBACK

DROP TABLE TASK6;
DROP TRIGGER DDL_TRIGGER ON DATABASE;

--7. Удалить все триггеры.
DROP TRIGGER NEWDATA;
DROP TRIGGER ONE;
DROP TRIGGER TWO;
DROP TRIGGER THREE;
DROP TRIGGER DDL_TRIGGER ON DATABASE;
DROP VIEW OFFICECITY;